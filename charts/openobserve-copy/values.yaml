# Default values for openobserve.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: public.ecr.aws/zinclabs/openobserve
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations:
    {}
    # eks.amazonaws.com/role-arn: arn:aws:iam::12345353456:role/zo-s3-eks
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

labels: {}

podSecurityContext:
  fsGroup: 2000
  runAsUser: 10000
  runAsGroup: 3000
  runAsNonRoot: true

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

replicaCount:
  ingester: 1
  querier: 1
  router: 1
  alertmanager: 1
  compactor: 1

ingester:
  sidecar:
    enabled: true
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    annotations: {}
    volumePermissions:
      enabled: false

# Credentials for authentication
auth:
  ZO_ROOT_USER_EMAIL: "root@example.com"
  ZO_ROOT_USER_PASSWORD: "Complexpass#123"

  # do not need to set this if enabled minio is being used. settings will be picked from minio section. Also IRSA is preferred if on EKS. Set the Service account section with the correct IAM role ARN. Refer https://zinc.dev/docs/guide/ha_deployment/#amazon-eks-s3
  ZO_S3_ACCESS_KEY: ""
  ZO_S3_SECRET_KEY: ""

  AZURE_STORAGE_ACCOUNT_KEY: ""
  AZURE_STORAGE_ACCOUNT_NAME: ""

config:
  ZO_NODE_ROLE: "all"
  ZO_LOCAL_MODE: "false"
  ZO_LOCAL_MODE_STORAGE: "disk"
  ZO_HTTP_PORT: "5080"
  ZO_HTTP_ADDR: ""
  ZO_HTTP_IPV6_ENABLED: "false"
  ZO_GRPC_PORT: "5081"
  ZO_GRPC_ADDR: ""
  ZO_GRPC_TIMEOUT: "600"
  ZO_GRPC_ORG_HEADER_KEY: "organization"
  ZO_GRPC_STREAM_HEADER_KEY: "stream-name"
  ZO_ROUTE_TIMEOUT: "600"
  ZO_INSTANCE_NAME: ""
  ZO_DATA_DIR: "./data/"
  ZO_DATA_DB_DIR: ""
  ZO_DATA_WAL_DIR: ""
  ZO_DATA_STREAM_DIR: ""
  ZO_DATA_CACHE_DIR: ""
  ZO_UI_ENABLED: "true"
  ZO_BASE_URI: ""
  ZO_META_STORE: ""
  ZO_META_DYNAMO_PREFIX: ""
  ZO_META_POSTGRES_DSN: ""
  ZO_META_MYSQL_DSN: ""
  ZO_WAL_MEMORY_MODE_ENABLED: "false"
  ZO_WAL_LINE_MODE_ENABLED: "true"
  ZO_PARQUET_COMPRESSION: "zstd"
  ZO_COLUMN_TIMESTAMP: "_timestamp"
  ZO_COLS_PER_RECORD_LIMIT: "200"
  ZO_WIDENING_SCHEMA_EVOLUTION: "true"
  ZO_SKIP_SCHEMA_VALIDATION: "false"
  ZO_FEATURE_PER_THREAD_LOCK: "false"
  ZO_FEATURE_FULLTEXT_ON_ALL_FIELDS: "false"
  ZO_FEATURE_FULLTEXT_EXTRA_FIELDS: ""
  ZO_FEATURE_DISTINCT_EXTRA_FIELDS: ""
  ZO_FEATURE_FILELIST_DEDUP_ENABLED: "false"
  ZO_FEATURE_QUERY_QUEUE_ENABLED: "true"
  ZO_BLOOM_FILTER_ENABLED: "true"
  ZO_BLOOM_FILTER_DEFAULT_FIELDS: ""
  ZO_TRACING_ENABLED: "false"
  ZO_TRACING_HEADER_KEY: "Authorization"
  ZO_TRACING_HEADER_VALUE: "Basic YWRtaW46Q29tcGxleHBhc3MjMTIz"
  OTEL_OTLP_HTTP_ENDPOINT: ""
  ZO_TELEMETRY: "true"
  ZO_TELEMETRY_URL: "https://e1.zinclabs.dev"
  ZO_HEARTBEAT_INTERVAL: "30"
  ZO_JSON_LIMIT: "209715200"
  ZO_PAYLOAD_LIMIT: "209715200"
  ZO_MAX_FILE_SIZE_ON_DISK: "32"
  ZO_MAX_FILE_RETENTION_TIME: "600"
  ZO_FILE_PUSH_INTERVAL: "10"
  ZO_FILE_MOVE_THREAD_NUM: "0"
  ZO_QUERY_THREAD_NUM: "0"
  ZO_QUERY_TIMEOUT: "600"
  ZO_HTTP_WORKER_NUM: "0"
  ZO_HTTP_WORKER_MAX_BLOCKING: "0"
  ZO_INGEST_ALLOWED_UPTO: "24"
  ZO_LOGS_FILE_RETENTION: "hourly"
  ZO_TRACES_FILE_RETENTION: "hourly"
  ZO_METRICS_FILE_RETENTION: "daily"
  ZO_METRICS_DEDUP_ENABLED: "true"
  ZO_METRICS_LEADER_PUSH_INTERVAL: "15"
  ZO_METRICS_LEADER_ELECTION_INTERVAL: "30"
  ZO_PROMETHEUS_HA_CLUSTER: "cluster"
  ZO_PROMETHEUS_HA_REPLICA: "__replica__"
  ZO_COMPACT_ENABLED: "true"
  ZO_COMPACT_STEP_SECS: "3600"
  ZO_COMPACT_INTERVAL: "60"
  ZO_COMPACT_SYNC_TO_DB_INTERVAL: "1800"
  ZO_COMPACT_MAX_FILE_SIZE: "256"
  ZO_COMPACT_DATA_RETENTION_DAYS: "0"
  ZO_COMPACT_DELETE_FILES_DELAY_HOURS: "2"
  ZO_COMPACT_BLOCKED_ORGS: ""
  ZO_MEMORY_CACHE_ENABLED: "true"
  ZO_MEMORY_CACHE_CACHE_LATEST_FILES: "false"
  ZO_MEMORY_CACHE_MAX_SIZE: "0"
  ZO_MEMORY_CACHE_SKIP_SIZE: "0"
  ZO_MEMORY_CACHE_RELEASE_SIZE: "0"
  ZO_MEMORY_CACHE_DATAFUSION_MEMORY_POOL: ""
  ZO_MEMORY_CACHE_DATAFUSION_MAX_SIZE: "0"
  ZO_DISK_CACHE_ENABLED: "true"
  ZO_DISK_CACHE_MAX_SIZE: "0"
  ZO_DISK_CACHE_SKIP_SIZE: "0"
  ZO_DISK_CACHE_RELEASE_SIZE: "0"
  ZO_ETCD_PREFIX: "/zinc/observe/"
  ZO_ETCD_CONNECT_TIMEOUT: "5"
  ZO_ETCD_COMMAND_TIMEOUT: "5"
  ZO_ETCD_LOCK_WAIT_TIMEOUT: "600"
  ZO_ETCD_USER: ""
  ZO_ETCD_PASSWORD: ""
  ZO_ETCD_CLIENT_CERT_AUTH: "false"
  ZO_ETCD_TRUSTED_CA_FILE: ""
  ZO_ETCD_CERT_FILE: ""
  ZO_ETCD_KEY_FILE: ""
  ZO_ETCD_DOMAIN_NAME: ""
  ZO_ETCD_LOAD_PAGE_SIZE: "1000"
  ZO_SLED_DATA_DIR: ""
  ZO_SLED_PREFIX: "/zinc/observe/"
  # ZO_S3_PROVIDER: "minio" # Need to set this up only if minio is being for object storage. Will be set automatically if enabled minio is being used.valid values are s3, azure, minio
  ZO_S3_SERVER_URL: "" # do not need to set this if enabled minio is being used. settings will be picked from minio section
  ZO_S3_REGION_NAME: "" # do not need to set this if enabled minio is being used. settings will be picked from minio section
  ZO_S3_BUCKET_NAME: "mysuperduperbucket" # do not need to set this if enabled minio is being used. settings will be picked from minio section
  ZO_S3_FEATURE_FORCE_PATH_STYLE: "false"
  ZO_S3_FEATURE_FORCE_HOSTED_STYLE: "false"
  ZO_S3_FEATURE_HTTP1_ONLY: "false"
  ZO_S3_FEATURE_HTTP2_ONLY: "false"
  ZO_S3_SYNC_TO_CACHE_INTERVAL: "600"
  ZO_S3_BUCKET_PREFIX: ""
  ZO_S3_CONNECT_TIMEOUT: "10" # in seconds
  ZO_S3_REQUEST_TIMEOUT: "3600" # in seconds
  ZO_S3_ALLOW_INVALID_CERTIFICATES: "false"
  ZO_USAGE_REPORTING_ENABLED: "false"
  ZO_USAGE_REPORTING_COMPRESSED_SIZE: "false"
  ZO_USAGE_ORG: "_meta"
  ZO_USAGE_BATCH_SIZE: "2000"
  ZO_PRINT_KEY_CONFIG: "false"
  ZO_PRINT_KEY_EVENT: "false"
  ZO_PRINT_KEY_SQL: "false"
  RUST_LOG: "info"
  RUST_BACKTRACE: "0"
  ZO_APP_NAME: "openobserve"
  ZO_INTERNAL_GRPC_TOKEN: ""
  ZO_TCP_PORT: "5514"
  ZO_UDP_PORT: "5514"
  ZO_CLUSTER_NAME: "openobserve"
  ZO_UI_SQL_BASE64_ENABLED: "false"
  ZO_IGNORE_FILE_RETENTION_BY_STREAM: "false"
  ZO_ENRICHMENT_TABLE_LIMIT: "10" # size in mb
  ZO_ACTIX_REQ_TIMEOUT: "30" # in seconds# in second
  ZO_ACTIX_KEEP_ALIVE: "30" # in second 


# Add extra environment variables to all pods, useful for overriding secrets
extraEnv: []
# - name: ZO_S3_SECRET_KEY
#   valueFrom:
#     secretKeyRef:
#       name: s3credentials-secret
#       key: S3_KEY

service:
  type: ClusterIP
  # type: LoadBalancer
  port: 5080

certIssuer:
  enabled: false

ingress:
  enabled: false
  # className: "nginx"
  annotations:
    {}
    # cert-manager.io/issuer: letsencrypt
    # kubernetes.io/tls-acme: true
    # nginx.ingress.kubernetes.io/enable-cors: "true"
    # nginx.ingress.kubernetes.io/connection-proxy-header: keep-alive
    # nginx.ingress.kubernetes.io/proxy-connect-timeout: '600'
    # nginx.ingress.kubernetes.io/proxy-send-timeout: '600'
    # nginx.ingress.kubernetes.io/proxy-read-timeout: '600'
    # nginx.ingress.kubernetes.io/proxy-body-size: 32m
  hosts:
    - host: demo.openobserve.ai
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    []
    # - secretName: demo.openobserve.ai
    #   hosts:
    #     - demo.openobserve.ai

# You can specify resources for each deployment independently.
# For example, to configure resources for the ingester, use
# the code below:
# resources:
#   ingester:
#     limits:
#       cpu: 150m
#       memory: 512Mi
#     requests:
#       cpu: 100m
#       memory: 128Mi
resources:
  ingester: {}
  querier: {}
  compactor: {}
  router: {}
  alertmanager: {}

# autoscaling:
#   enabled: false
#   minReplicas: 1
#   maxReplicas: 100
#   targetCPUUtilizationPercentage: 80
#   # targetMemoryUtilizationPercentage: 80

autoscaling:
  ingester:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  querier:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  router:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  compactor:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations:
  ingester: []
  querier: []
  compactor: []
  router: []
  alertmanager: []
  zplane: []

affinity: {}

etcd:
  enabled: true # if true then etcd will be deployed as part of openobserve
  externalUrl: "my_custom_host.com:2379" # if enabled is false then this is required
  replicaCount: 3 # if enabled is true then this is required. should be odd number
  image:
    registry: docker.io
    repository: bitnami/etcd
    tag: 3.5.8-debian-11-r4
    pullPolicy: IfNotPresent
    digest: ""
  auth:
    token:
      enabled: false
    rbac:
      create: false
      allowNoneAuthentication: true
      rootPassword: ""
  logLevel: "info"
  extraEnvVars:
    - name: ETCD_QUOTA_BACKEND_BYTES
      value: "17179869184"
    - name: ETCD_AUTO_COMPACTION_RETENTION
      value: "2"
  persistence:
    size: 20Gi
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    annotations: {}

minio:
  enabled: false # if true then minio will be deployed as part of openobserve
  region: "us-east-1"
  rootUser: rootuser
  rootPassword: rootpass123
  drivesPerNode: 1
  replicas: 4
  mode: distributed # or standalone
  image:
    repository: quay.io/minio/minio
    tag: RELEASE.2023-02-10T18-48-39Z
    pullPolicy: IfNotPresent
  mcImage:
    repository: quay.io/minio/mc
    tag: RELEASE.2023-01-28T20-29-38Z
    pullPolicy: IfNotPresent
  buckets:
    - name: mysuperduperbucket
      policy: none
      purge: false
  resources:
    requests:
      memory: 256Mi
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    annotations: {}

# zPlane enables elasticsearch compatibility for openobserve. Copyright (c) 2023 Zinc Labs Inc.
# You can enable zPlane by setting enabled to true
# zPlane is a commercial software and requires a license to be used.
# Reach out to hello@zinclabs.io for commercial license if you continue to use zPlane
zplane:
  enabled: false # if true then zPlane will be deployed as part of openobserve
  image:
    repository: public.ecr.aws/zinclabs/zplane
    tag: 0.1.6
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 9200
  ingress: # if enabled is true then this is required
    enabled: false
    className: ""
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # cert-manager.io/issuer: letsencrypt
      # kubernetes.io/tls-acme: true
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      []
      # - secretName: chart-example-tls
      #   hosts:
      #     - chart-example.local

probes:
  alertmanager:
    enabled: false
  compactor:
    enabled: false
  ingester:
    enabled: false
  querier:
    enabled: false
  router:
    enabled: false
