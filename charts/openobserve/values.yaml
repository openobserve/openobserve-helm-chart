# Default values for openobserve.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  oss:
    repository: public.ecr.aws/zinclabs/openobserve
    # Overrides the image tag whose default is the chart appVersion.
    tag: "v0.14.0"
  enterprise:
    repository: public.ecr.aws/zinclabs/openobserve-enterprise
    # Overrides the image tag whose default is the chart appVersion.
    tag: "v0.14.0"
  reportserver:
    repository: public.ecr.aws/zinclabs/report-server
    tag: "v0.0.9-6618bad"
  busybox:
    repository: public.ecr.aws/docker/library/busybox
    tag: 1.36.1
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
clusterDomain: "cluster.local"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # eks.amazonaws.com/role-arn: arn:aws:iam::12345353456:role/zo-s3-eks
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

labels: {}

podSecurityContext:
  fsGroup: 2000
  runAsUser: 10000
  runAsGroup: 3000
  runAsNonRoot: true

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

replicaCount:
  ingester: 1
  querier: 1
  router: 1
  alertmanager: 1
  compactor: 1
  zplane: 0
  reportserver: 0

alertmanager:
  # Alertmanager specific configuration
  config:
    ZO_META_CONNECTION_POOL_MIN_SIZE: "0"
    ZO_META_CONNECTION_POOL_MAX_SIZE: "0"
    ZO_ACTIX_REQ_TIMEOUT: "30"
  extraEnv: []

compactor:
  # Compactor specific configuration
  config:
    ZO_COMPACT_MAX_FILE_SIZE: "512"
    ZO_META_CONNECTION_POOL_MIN_SIZE: "0"
    ZO_META_CONNECTION_POOL_MAX_SIZE: "0"
    ZO_ACTIX_REQ_TIMEOUT: "30"
  extraEnv: []

router:
  # Router specific configuration
  config:
    ZO_META_CONNECTION_POOL_MIN_SIZE: "0"
    ZO_META_CONNECTION_POOL_MAX_SIZE: "0"
    ZO_ACTIX_REQ_TIMEOUT: "30"
  extraEnv: []

ingester:
  # Ingester specific configuration
  config:
    ZO_META_CONNECTION_POOL_MIN_SIZE: "0"
    ZO_META_CONNECTION_POOL_MAX_SIZE: "0"
    ZO_ACTIX_REQ_TIMEOUT: "30"
  extraEnv: []
  headless:
    enabled: false
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    annotations: {}
    volumePermissions:
      enabled: false

querier:
  # Querier specific configuration
  config:
    ZO_META_CONNECTION_POOL_MIN_SIZE: "0"
    ZO_META_CONNECTION_POOL_MAX_SIZE: "0"
    ZO_ACTIX_REQ_TIMEOUT: "30"
  extraEnv: []
  persistence: # If enabled it will be used for disk cache. Highly recommend to enable this for production
    enabled: true
    size: 100Gi
    storageClass: ""
    accessModes:
      - ReadWriteOnce

reportserver:
  enabled: false # if true then reportserver will be deployed as part of openobserve
  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

scriptserver:
  enabled: false # if true then scriptserver will be deployed in action-executor namespace
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 128Mi
  namespaces:
    executor: action-executor
    playground: action-playground
  extraEnv: []
# Enable the following to use an external secret instead of placing credentials under the auth section in this values.yaml file
externalSecret:
  enabled: false
  # name of the external secret
  name: "super-secret"

# Credentials for authentication. Will be stored in a k8s secret
auth:
  ZO_ROOT_USER_EMAIL: "root@example.com"
  ZO_ROOT_USER_PASSWORD: "Complexpass#123"

  # do not need to set this if enabled minio is being used. settings will be picked from minio section. Also IRSA is preferred if on EKS. Set the Service account section with the correct IAM role ARN. Refer https://zinc.dev/docs/guide/ha_deployment/#amazon-eks-s3
  ZO_S3_ACCESS_KEY: ""
  ZO_S3_SECRET_KEY: ""

  AZURE_STORAGE_ACCOUNT_KEY: ""
  AZURE_STORAGE_ACCOUNT_NAME: ""
  ZO_META_POSTGRES_DSN: ""
  ZO_META_MYSQL_DSN: ""
  ZO_TRACING_HEADER_KEY: "Authorization"
  ZO_TRACING_HEADER_VALUE: "Basic cm9vdEBleGFtcGxlLmNvbTpDb21wbGV4cGFzcyMxMjM="
  ZO_RUM_CLIENT_TOKEN: ""
  ZO_REPORT_USER_EMAIL: "" # Check details at https://github.com/openobserve/o2_report_server
  ZO_REPORT_USER_PASSWORD: ""
  ZO_SMTP_USER_NAME: "ABAAQQQQFFFFF" # Replace with your own SMTP username
  ZO_SMTP_PASSWORD: "+fjlahsguykevfkajvjk#jsbj43$bjkjbkk" # Replace with your own SMTP password

config:
  ZO_APP_NAME: "openobserve"
  ZO_CLUSTER_NAME: "o2"
  ZO_INSTANCE_NAME: ""
  ZO_NODE_ROLE: "all"
  ZO_LOCAL_MODE: "false"
  ZO_LOCAL_MODE_STORAGE: "disk"
  ZO_HTTP_PORT: "5080"
  ZO_HTTP_ADDR: ""
  ZO_HTTP_IPV6_ENABLED: "false"
  ZO_GRPC_PORT: "5081"
  ZO_GRPC_ADDR: ""
  ZO_GRPC_CONNECT_TIMEOUT: "600"
  ZO_GRPC_MAX_MESSAGE_SIZE: "16"
  ZO_GRPC_ORG_HEADER_KEY: "organization"
  ZO_GRPC_STREAM_HEADER_KEY: "stream-name"
  ZO_INTERNAL_GRPC_TOKEN: ""
  ZO_TCP_PORT: "5514"
  ZO_UDP_PORT: "5514"
  ZO_DATA_DIR: "./data/"
  ZO_DATA_DB_DIR: ""
  ZO_DATA_WAL_DIR: ""
  ZO_DATA_IDX_DIR: ""
  ZO_DATA_STREAM_DIR: ""
  ZO_DATA_CACHE_DIR: ""
  ZO_MMDB_DATA_DIR: ""
  ZO_UI_ENABLED: "true"
  ZO_UI_SQL_BASE64_ENABLED: "false"
  ZO_WEB_URL: ""
  ZO_BASE_URI: ""
  ZO_HEALTH_CHECK_ENABLED: "true"
  ZO_HEALTH_CHECK_TIMEOUT: "10"
  ZO_HEALTH_CHECK_FAILED_TIMES: "5"
  ZO_CLUSTER_COORDINATOR: "nats"
  ZO_QUEUE_STORE: ""
  ZO_META_STORE: "postgres"
  ZO_META_CONNECTION_POOL_MIN_SIZE: "0"
  ZO_META_CONNECTION_POOL_MAX_SIZE: "0"
  ZO_META_TRANSACTION_RETRIES: "3"
  ZO_META_TRANSACTION_LOCK_TIMEOUT: "600" # seconds
  ZO_COLUMN_TIMESTAMP: "_timestamp"
  ZO_COLS_PER_RECORD_LIMIT: "200"
  ZO_FEATURE_FULLTEXT_EXTRA_FIELDS: ""
  ZO_FEATURE_INDEX_EXTRA_FIELDS: ""
  ZO_FEATURE_DISTINCT_EXTRA_FIELDS: ""
  ZO_FEATURE_FILELIST_DEDUP_ENABLED: "false"
  ZO_FEATURE_QUERY_QUEUE_ENABLED: "true"
  ZO_FEATURE_QUERY_INFER_SCHEMA: "false"
  ZO_FEATURE_QUICK_MODE_FIELDS: "" # default fields for quick mode
  ZO_FEATURE_QUERY_PARTITION_STRATEGY: "file_hash"
  ZO_FEATURE_PER_THREAD_LOCK: "false"
  ZO_RESULT_CACHE_ENABLED: "true" # Enable result cache for query results
  ZO_USE_MULTIPLE_RESULT_CACHE: "true" # Enable to use mulple result caches for query results
  ZO_RESULT_CACHE_SELECTION_STRATEGY: "overlap" # Strategy to use for result cache, default is both , possible value - both,overlap , duration
  ZO_RESULT_CACHE_DISCARD_DURATION: "60" # Discard data of last n seconds from cached results
  ZO_CONSISTENT_HASH_VNODES: "1000"
  ZO_QUERY_OPTIMIZATION_NUM_FIELDS: "0"
  ZO_SCHEMA_MAX_FIELDS_TO_ENABLE_UDS: "150"
  ZO_USER_DEFINED_SCHEMA_MAX_FIELDS: "200"
  ZO_QUICK_MODE_ENABLED: "false"
  ZO_QUICK_MODE_FORCE_ENABLED: "true"
  ZO_QUICK_MODE_NUM_FIELDS: "500"
  ZO_QUICK_MODE_STRATEGY: ""
  ZO_BLOOM_FILTER_ENABLED: "true"
  ZO_BLOOM_FILTER_DEFAULT_FIELDS: ""
  ZO_ENABLE_INVERTED_INDEX: "true"
  ZO_INVERTED_INDEX_STORE_FORMAT: "tantivy" # InvertedIndex store format, parquet(default), tantivy, both
  ZO_INVERTED_INDEX_SEARCH_FORMAT: "tantivy" # InvertedIndex search format, parquet(default), tantivy.
  ZO_INVERTED_INDEX_TANTIVY_MODE: "puffin" # Tantivy search mode, puffin or mmap, default is puffin.
  ZO_INVERTED_INDEX_COUNT_OPTIMIZER_ENABLED: "true"
  ZO_FEATURE_QUERY_REMOVE_FILTER_WITH_INDEX: "true"
  ZO_QUERY_ON_STREAM_SELECTION: "true" # Toggle search to be trigger based on button click event.
  ZO_DISTINCT_VALUES_INTERVAL: "10"
  ZO_DISTINCT_VALUES_HOURLY: "false"
  ZO_TRACING_ENABLED: "false"
  ZO_TRACING_SEARCH_ENABLED: "false"
  ZO_TRACING_HEADER_KEY: "Authorization"
  OTEL_OTLP_HTTP_ENDPOINT: ""
  ZO_TELEMETRY: "true"
  ZO_TELEMETRY_HEARTBEAT: "1800"
  ZO_TELEMETRY_URL: "https://e1.zinclabs.dev"
  ZO_JSON_LIMIT: "209715200"
  ZO_PAYLOAD_LIMIT: "209715200"
  ZO_PARQUET_MAX_ROW_GROUP_SIZE: "0"
  ZO_MAX_FILE_SIZE_ON_DISK: "128"
  ZO_MAX_FILE_SIZE_IN_MEMORY: "128"
  ZO_MAX_FILE_RETENTION_TIME: "600"
  ZO_FILE_PUSH_INTERVAL: "10"
  ZO_FILE_PUSH_LIMIT: "10000" # over this limit will skip merging on ingester
  ZO_FILE_MOVE_FIELDS_LIMIT: "2000"
  ZO_FILE_MOVE_THREAD_NUM: "0"
  ZO_FILE_MERGE_THREAD_NUM: "0"
  ZO_MEM_DUMP_THREAD_NUM: "0"
  ZO_MEM_TABLE_MAX_SIZE: "0"
  ZO_MEM_TABLE_BUCKET_NUM: "0"
  ZO_MEM_PERSIST_INTERVAL: "5"
  ZO_ENRICHMENT_TABLE_LIMIT: "10" # size in mb
  ZO_WAL_WRITE_BUFFER_SIZE: "16384"
  ZO_WAL_FSYNC_DISABLED: "false"
  ZO_QUERY_THREAD_NUM: "0"
  ZO_QUERY_TIMEOUT: "600"
  ZO_ROUTE_TIMEOUT: "600"
  ZO_QUERY_DEFAULT_LIMIT: "1000"
  ZO_ROUTE_MAX_CONNECTIONS: "1024"
  ZO_HTTP_WORKER_NUM: "0"
  ZO_HTTP_WORKER_MAX_BLOCKING: "0"
  ZO_ACTIX_REQ_TIMEOUT: "30" # in second
  ZO_ACTIX_KEEP_ALIVE: "30" # in second
  ZO_ACTIX_SHUTDOWN_TIMEOUT: "10" # in second
  ZO_ACTIX_SLOW_LOG_THRESHOLD: "5" # in second
  ZO_INGEST_ALLOWED_UPTO: "24"
  ZO_INGEST_FLATTEN_LEVEL: "3"
  ZO_LOGS_FILE_RETENTION: "hourly"
  ZO_TRACES_FILE_RETENTION: "hourly"
  ZO_METRICS_FILE_RETENTION: "daily"
  ZO_METRICS_DEDUP_ENABLED: "true"
  ZO_METRICS_LEADER_PUSH_INTERVAL: "15"
  ZO_METRICS_LEADER_ELECTION_INTERVAL: "30"
  ZO_PROMETHEUS_HA_CLUSTER: "cluster"
  ZO_PROMETHEUS_HA_REPLICA: "__replica__"
  ZO_COMPACT_ENABLED: "true"
  ZO_COMPACT_INTERVAL: "60"
  ZO_COMPACT_SYNC_TO_DB_INTERVAL: "600"
  ZO_COMPACT_STRATEGY: "file_time"
  ZO_COMPACT_MAX_FILE_SIZE: "512"
  ZO_COMPACT_DATA_RETENTION_DAYS: "3650"
  ZO_COMPACT_DELETE_FILES_DELAY_HOURS: "2"
  ZO_COMPACT_BATCH_SIZE: "500"
  ZO_COMPACT_BLOCKED_ORGS: ""
  ZO_MEMORY_CACHE_ENABLED: "true"
  ZO_MEMORY_CACHE_STRATEGY: "lru"
  ZO_MEMORY_CACHE_CACHE_LATEST_FILES: "false"
  ZO_MEMORY_CACHE_MAX_SIZE: "0"
  ZO_MEMORY_CACHE_SKIP_SIZE: "0"
  ZO_MEMORY_CACHE_RELEASE_SIZE: "0"
  ZO_MEMORY_CACHE_GC_SIZE: "50"
  ZO_MEMORY_CACHE_GC_INTERVAL: "0"
  ZO_MEMORY_CACHE_DATAFUSION_MEMORY_POOL: ""
  ZO_MEMORY_CACHE_DATAFUSION_MAX_SIZE: "0"
  ZO_DISK_CACHE_ENABLED: "true"
  ZO_DISK_CACHE_STRATEGY: "lru"
  ZO_DISK_CACHE_MAX_SIZE: "0"
  ZO_DISK_CACHE_SKIP_SIZE: "0"
  ZO_DISK_CACHE_RELEASE_SIZE: "0"
  ZO_DISK_CACHE_GC_SIZE: "100"
  ZO_DISK_CACHE_GC_INTERVAL: "0"
  ZO_ETCD_PREFIX: "/zinc/observe/"
  ZO_ETCD_CONNECT_TIMEOUT: "5"
  ZO_ETCD_COMMAND_TIMEOUT: "5"
  ZO_ETCD_LOCK_WAIT_TIMEOUT: "600"
  ZO_ETCD_USER: ""
  ZO_ETCD_PASSWORD: ""
  ZO_ETCD_CLIENT_CERT_AUTH: "false"
  ZO_ETCD_TRUSTED_CA_FILE: ""
  ZO_ETCD_CERT_FILE: ""
  ZO_ETCD_KEY_FILE: ""
  ZO_ETCD_DOMAIN_NAME: ""
  ZO_ETCD_LOAD_PAGE_SIZE: "100"
  ZO_NATS_ADDR: "nats://nats.openobserve.svc.cluster.local:4222"
  ZO_NATS_PREFIX: "o2_"
  ZO_NATS_USER: ""
  ZO_NATS_PASSWORD: ""
  ZO_NATS_REPLICAS: "3"
  ZO_NATS_QUEUE_MAX_AGE: "60" # days for queue message max age
  ZO_NATS_CONNECT_TIMEOUT: "5"
  ZO_NATS_COMMAND_TIMEOUT: "10"
  ZO_NATS_LOCK_WAIT_TIMEOUT: "600"
  ZO_S3_PROVIDER: "s3" # Valid values are s3, azure, minio, gcs
  ZO_S3_SERVER_URL: "" # do not need to set this if enabled minio is being used. settings will be picked from minio section
  ZO_S3_REGION_NAME: "us-east-2" # do not need to set this if enabled minio is being used. settings will be picked from minio section
  ZO_S3_BUCKET_NAME: "o2-dev-bucket" # do not need to set this if enabled minio is being used. settings will be picked from minio section
  ZO_S3_BUCKET_PREFIX: ""
  ZO_S3_FEATURE_FORCE_HOSTED_STYLE: "false"
  ZO_S3_FEATURE_HTTP1_ONLY: "false"
  ZO_S3_FEATURE_HTTP2_ONLY: "false"
  ZO_S3_SYNC_TO_CACHE_INTERVAL: "600"
  ZO_S3_CONNECT_TIMEOUT: "10" # in seconds
  ZO_S3_REQUEST_TIMEOUT: "3600" # in seconds
  ZO_S3_ALLOW_INVALID_CERTIFICATES: "false"
  ZO_S3_MAX_RETRIES: "10"
  ZO_S3_MAX_IDLE_PER_HOST: "0"
  ZO_S3_CONNECTION_KEEPALIVE_TIMEOUT: "20"
  ZO_USAGE_REPORTING_ENABLED: "false"
  ZO_USAGE_REPORTING_MODE: "local"
  ZO_USAGE_REPORTING_URL: "http://localhost:5080/api/_meta/usage/_json"
  ZO_USAGE_REPORTING_CREDS: ""
  ZO_USAGE_REPORTING_THREAD_NUM: "0"
  ZO_USAGE_ORG: "_meta"
  ZO_USAGE_BATCH_SIZE: "2000"
  ZO_USAGE_PUBLISH_INTERVAL: "60" # duration in seconds after last reporting usage will be published
  ZO_PRINT_KEY_CONFIG: "false"
  ZO_PRINT_KEY_EVENT: "false"
  ZO_PRINT_KEY_SQL: "false"
  ZO_INGESTER_SERVICE_URL: ""
  ZO_IGNORE_FILE_RETENTION_BY_STREAM: "false"
  ZO_RUM_ENABLED: "false"
  ZO_RUM_APPLICATION_ID: ""
  ZO_RUM_SITE: ""
  ZO_RUM_SERVICE: ""
  ZO_RUM_ENV: ""
  ZO_RUM_VERSION: "0.9.1"
  ZO_RUM_ORGANIZATION_IDENTIFIER: "default"
  ZO_RUM_API_VERSION: "v1"
  ZO_RUM_INSECURE_HTTP: "false"
  ZO_COOKIE_MAX_AGE: "2592000" # 30 days
  ZO_COOKIE_SAME_SITE_LAX: "true"
  ZO_COOKIE_SECURE_ONLY: "false"
  ZO_PROF_PYROSCOPE_ENABLED: "false"
  ZO_PROF_PYROSCOPE_SERVER_URL: "http://localhost:4040"
  ZO_PROF_PYROSCOPE_PROJECT_NAME: "openobserve"
  ZO_ENTRY_PER_SCHEMA_VERSION_ENABLED: "true"
  ZO_QUERY_GROUP_BASE_SPEED: "768" # MB/s/core
  ZO_QUERY_PARTITION_BY_SECS: "1" # In how many seconds we want to get the results per partition
  ZO_QUERY_PARTITION_MIN_SECS: "600" # seconds. This is the minimum time range for a partition
  RUST_LOG: "info"
  RUST_BACKTRACE: "0"
  ZO_SHOW_STREAM_DATES_DOCS_NUM: true # Show docs count and stream dates
  ZO_INGEST_BLOCKED_STREAMS: "" # // use comma to split multiple streams
  ZO_INGEST_INFER_SCHEMA_PER_REQUEST: "true"
  ZO_REPORT_SERVER_HTTP_PORT: "5082"
  ZO_CHROME_SLEEP_SECS: "50"
  ZO_CHROME_NO_SANDBOX: "true"
  ZO_SMTP_ENABLED: "false" # if true then smtp will be enabled. set SMTP creds in auth section. Set ZO_WEB_URL to the correct URL for reports to be sent
  ZO_SMTP_HOST: "email-smtp.us-west-2.amazonaws.com"
  ZO_SMTP_PORT: "465"
  ZO_SMTP_FROM_EMAIL: "root@example.com"
  ZO_SMTP_ENCRYPTION: "ssltls"
  ZO_CONCATENATED_SCHEMA_FIELD_NAME: "_all"
  ZO_SCHEMA_CACHE_COMPRESS_ENABLED: "false"
  ZO_SKIP_FORMAT_BULK_STREAM_NAME: false
  ZO_BULK_RESPONSE_INCLUDE_ERRORS_ONLY: false
  ZO_ALLOW_USER_DEFINED_SCHEMAS: "true"
  ZO_MEM_TABLE_STREAMS: "" # Streams for which dedicated MemTable will be used as comma separated values
  ZO_DEFAULT_SCRAPE_INTERVAL: "15"
  ZO_CIRCUIT_BREAKER_ENABLED: "false"
  ZO_CIRCUIT_BREAKER_RATIO: "100"
  ZO_MMDB_DISABLE_DOWNLOAD: "false"
  ZO_MMDB_UPDATE_DURATION: "86400" # Everyday to test
  ZO_MMDB_GEOLITE_CITYDB_URL: "https://geoip.zinclabs.dev/GeoLite2-City.mmdb"
  ZO_MMDB_GEOLITE_CITYDB_SHA256_URL: "https://geoip.zinclabs.dev/GeoLite2-ASN.sha256"
  ZO_MMDB_GEOLITE_ASNDB_URL: "https://geoip.zinclabs.dev/GeoLite2-ASN.mmdb"
  ZO_MMDB_GEOLITE_ASNDB_SHA256_URL: "https://geoip.zinclabs.dev/GeoLite2-ASN.sha256"
  ZO_REPORT_USER_NAME: ""
  ZO_REPORT_USER_PASSWORD: ""
  ZO_REPORT_SERVER_URL: ""
  ZO_REPORT_SERVER_SKIP_TLS_VERIFY: "false"
  ZO_SKIP_FORMAT_STREAM_NAME: false
  ZO_TRACES_SPAN_METRICS_ENABLED: "false" # enable span metrics for traces
  ZO_TRACES_SPAN_METRICS_EXPORT_INTERVAL: "60" # traces span metrics export interval, unit seconds
  ZO_TRACES_SPAN_METRICS_CHANNEL_BUFFER: "100000" # traces span metrics channel send buffer size
  ZO_SELF_METRIC_CONSUMPTION_ENABLED: "false" # self-consume metrics generated by openobserve
  ZO_SELF_METRIC_CONSUMPTION_INTERVAL: "60" # self-consume metrics interval, unit seconds
  ZO_SELF_METRIC_CONSUMPTION_ACCEPTLIST: "" # only these metrics will be self-consumed, comma separated
  ZO_SWAGGER_ENABLED: "true"
  ZO_WEBSOCKET_ENABLED: "false"
  ZO_MIN_AUTO_REFRESH_INTERVAL: "5"

# Add extra environment variables to all pods, useful for overriding secrets
extraEnv: []
# - name: ZO_S3_SECRET_KEY
#   valueFrom:
#     secretKeyRef:
#       name: s3credentials-secret
#       key: S3_KEY

service:
  type: ClusterIP
  # type: LoadBalancer
  http_port: 5080
  grpc_port: 5081
  report_server_port: 5082
  # if the type of service is LoadBalancer, you can config available annotations for Kubernetes load balancers by cloud provider.
  # annotations:
  #  service.beta.kubernetes.io/aws-load-balancer-internal: "true"
  #  service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"

certIssuer:
  enabled: false

ingress:
  enabled: false
  className: "nginx"
  annotations:
    cert-manager.io/issuer: letsencrypt
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1" # Enable HTTP/1.1 for WebSockets
    nginx.ingress.kubernetes.io/enable-websocket: "true"
    nginx.ingress.kubernetes.io/proxy-set-headers: |
      Upgrade $http_upgrade;
      Connection "Upgrade";
    # nginx.ingress.kubernetes.io/connection-proxy-header: keep-alive # keep-alive should be disabled for websockets to work
    # nginx.ingress.kubernetes.io/proxy-connect-timeout: '600'
    # nginx.ingress.kubernetes.io/proxy-send-timeout: '600'
    # nginx.ingress.kubernetes.io/proxy-read-timeout: '600'
    # nginx.ingress.kubernetes.io/proxy-body-size: 32m
  hosts:
    - host: openobserve.example.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: openobserve.example.com
      hosts:
        - openobserve.example.com

# You can specify resources for each deployment independently.
# For example, to configure resources for the ingester, use
# the code below:
# resources:
#   ingester:
#     limits:
#       cpu: 150m
#       memory: 512Mi
#     requests:
#       cpu: 100m
#       memory: 128Mi
resources:
  ingester: {}
  querier: {}
  compactor: {}
  router: {}
  alertmanager: {}
  dex: {}
  reportserver: {}

# autoscaling:
#   enabled: false
#   minReplicas: 1
#   maxReplicas: 100
#   targetCPUUtilizationPercentage: 80
#   # targetMemoryUtilizationPercentage: 80

autoscaling:
  ingester:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  router:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  compactor:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  dex:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  reportserver:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

nodeSelector:
  ingester: {}
  querier: {}
  compactor: {}
  router: {}
  alertmanager: {}
  zplane: {}
  dex: {}
  reportserver: {}

tolerations:
  ingester: []
  querier: []
  compactor: []
  router: []
  alertmanager: []
  zplane: []
  dex: []
  reportserver: []

affinity:
  ingester: {}
  querier: {}
  compactor: {}
  router: {}
  alertmanager: {}
  zplane: {}
  dex: {}
  reportserver: {}

nats:
  enabled: true # if true then nats will be deployed as part of openobserve
  externalUrl: "my_custom_host.com:4222" # if enabled is false then this is required
  config:
    cluster:
      enabled: true
    routeURLs:
      user: ""
      password: ""
    jetstream:
      enabled: true
      fileStore:
        enabled: true
        pvc:
          enabled: true
          size: 20Gi
          storageClassName: ""
    promExporter:
      enabled: true
      podMonitor:
        enabled: true
    natsBox:
      container:
        image:
          repository: natsio/nats-box
          tag: 0.14.5-nonroot

etcd:
  enabled: false # if true then etcd will be deployed as part of openobserve
  externalUrl: "my_custom_host.com:2379" # if enabled is false then this is required
  replicaCount: 3 # if enabled is true then this is required. should be odd number
  clusterDomain: "cluster.local"
  image:
    registry: docker.io
    repository: bitnami/etcd
    tag: 3.5.8-debian-11-r4
    pullPolicy: IfNotPresent
    digest: ""
  auth:
    token:
      enabled: false
    rbac:
      create: false
      allowNoneAuthentication: true
      rootPassword: ""
  logLevel: "info"
  extraEnvVars:
    - name: ETCD_QUOTA_BACKEND_BYTES
      value: "17179869184"
    - name: ETCD_AUTO_COMPACTION_RETENTION
      value: "2"
  persistence:
    size: 20Gi
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    annotations: {}

minio:
  enabled: false # if true then minio will be deployed as part of openobserve
  region: "us-east-1"
  rootUser: rootuser
  rootPassword: rootpass123
  drivesPerNode: 1
  replicas: 4
  mode: distributed # or standalone
  image:
    repository: quay.io/minio/minio
    tag: RELEASE.2023-02-10T18-48-39Z
    pullPolicy: IfNotPresent
  mcImage:
    repository: quay.io/minio/mc
    tag: RELEASE.2023-01-28T20-29-38Z
    pullPolicy: IfNotPresent
  buckets:
    - name: mysuperduperbucket
      policy: none
      purge: false
  resources:
    requests:
      memory: 256Mi
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    annotations: {}

# zPlane enables elasticsearch compatibility for openobserve. Copyright (c) 2023 Zinc Labs Inc.
# You can enable zPlane by setting enabled to true
# zPlane is a commercial software and requires a license to be used.
# Reach out to hello@zinclabs.io for commercial license if you continue to use zPlane
zplane:
  enabled: false # if true then zPlane will be deployed as part of openobserve
  image:
    repository: public.ecr.aws/zinclabs/zplane
    tag: 0.1.6
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 9200
  ingress: # if enabled is true then this is required
    enabled: false
    className: ""
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # cert-manager.io/issuer: letsencrypt
      # kubernetes.io/tls-acme: true
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      []
      # - secretName: chart-example-tls
      #   hosts:
      #     - chart-example.local

# Postgres is used for storing openobserve metadata.
# Make sure to install cloudnative-pg operator before enabling this
# https://github.com/cloudnative-pg/cloudnative-pg/blob/main/docs/src/installation_upgrade.md
# kubectl apply --server-side -f \
#   https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.22/releases/cnpg-1.22.1.yaml
postgres:
  enabled: false
  pgadmin:
    enabled: false
    image:
      repository: dpage/pgadmin4
      tag: latest
    resources:
      requests:
        memory: 200Mi
        cpu: 10m
      limits:
        memory: 250Mi
        cpu: 100m
    PGADMIN_DEFAULT_EMAIL: hello@openobserve.ai
    PGADMIN_DEFAULT_PASSWORD: Batman123
  spec:
    password: Batman123 # password # username is hardcoded to openobserve, db is hardcoded to app
    enableSuperuserAccess: true # if true then superuser access will be enabled. You can get the password from appropriate secret once the postgres is deployed
    instances: 2 # creates a primary and a replica. replica will become primary if the primary fails
    affinity: # see details https://cloudnative-pg.io/documentation/1.24/scheduling/
      podAntiAffinityType: preferred
    storage:
      size: 10Gi
    postgresql:
      parameters:
        shared_buffers: "1GB"
        max_connections: "1500"
    monitoring:
      enablePodMonitor: true
    backup: {} # All the configuration associated with an object store from https://cloudnative-pg.io/documentation/1.17/backup_recovery/

enterprise:
  enabled: false
  parameters:
    O2_AUDIT_ENABLED: "true"
    O2_AUDIT_BATCH_SIZE: "500"
    O2_CUSTOM_LOGO_TEXT: ""
    O2_CUSTOM_SLACK_URL: ""
    O2_CUSTOM_DOCS_URL: ""
    O2_CUSTOM_HIDE_MENUS: ""
    O2_CUSTOM_HIDE_SELF_LOGO: "false"
    O2_SUPER_CLUSTER_ENABLED: "false"
    O2_SUPER_CLUSTER_PUBLIC_ADDR: ""
    O2_SUPER_CLUSTER_PUBLIC_PORT: ""
    O2_SUPER_CLUSTER_GRPC_TOKEN: ""
    O2_SEARCH_GROUP_CPU_LIMIT_ENABLED: "false"
    O2_SEARCH_GROUP_DYNAMIC_RESOURCE: "true"
    O2_SEARCH_GROUP_LONG_MAX_CPU: "50%"
    O2_SEARCH_GROUP_LONG_MAX_MEMORY: "50%"
    O2_SEARCH_GROUP_LONG_MAX_CONCURRENCY: "4"
    O2_SEARCH_GROUP_SHORT_MAX_CPU: "50%"
    O2_SEARCH_GROUP_SHORT_MAX_MEMORY: "50%"
    O2_SEARCH_GROUP_SHORT_MAX_CONCURRENCY: "10"
    O2_SEARCH_GROUP_USER_LONG_MAX_CONCURRENCY: "1"
    O2_SEARCH_GROUP_USER_SHORT_MAX_CONCURRENCY: "2"
    O2_SEARCH_GROUP_BASE_SPEED: "1024" # in MB
    O2_SEARCH_GROUP_BASE_SECS: "10" # in seconds
  openfga:
    enabled: false
    parameters:
      O2_OPENFGA_LIST_ONLY_PERMITTED: "true"
      O2_MAP_GROUP_TO_ROLE: "true"
      O2_MAP_GROUP_TO_ROLE_SKIP_CREATION: "false"
      O2_OPENFGA_PAGE_SIZE: "100"
    image:
      repository: openfga/openfga
      tag: latest
      pullPolicy: IfNotPresent
  dex:
    enabled: false
    parameters:
      O2_CALLBACK_URL: https://openobserve.example.com/web/cb
      O2_DEX_SCOPES: openid profile email groups offline_access
      O2_DEX_GROUP_ATTRIBUTE: ou
      O2_DEX_DEFAULT_ORG: default
      O2_DEX_DEFAULT_ROLE: user
      O2_DEX_ROLE_ATTRIBUTE: role
      O2_DEX_NATIVE_LOGIN_ENABLED: "true"
      O2_DEX_GROUP_CLAIM: "groups"
      O2_DEX_LDAP_GROUP_ATTRIBUTE: "ou"
      O2_DEX_LDAP_ROLE_ATTRIBUTE: "cn"
    config:
      issuer: https://dex.example.com/dex
      storage:
        type: kubernetes
        config:
          inCluster: true
      web:
        http: 0.0.0.0:5556
      frontend:
        issuer: "OpenObserve"
        logoURL: "https://cloud.openobserve.ai/web/src/assets/images/common/open_observe_logo.svg"
      expiry:
        idTokens: 10m
        refreshTokens:
          validIfNotUsedFor: 30m
      staticClients:
        - id: o2-client
          redirectURIs:
            - https://openobserve.example.com/config/redirect
          name: o2-client
          secret: ZXhhbXBsZS1hcHAtc2VjcmV0 # This should be base64 encoded value of client secret.Gets mapped to O2_DEX_CLIENT_SECRET
      oauth2:
        responseTypes:
          - code
        skipApprovalScreen: true
      connectors:
        # - type: google
        #   id: google
        #   name: Google
        #   config:

        #     # Connector config values starting with a "$" will read from the environment.
        #     clientID: 123144355-hcghfcfghd5fhcv5v7hvh.apps.googleusercontent.com
        #     clientSecret: GOABCD-gghfge543edfgc55dcgcghf6

        #     # Dex's issuer URL + "/callback"
        #     redirectURI: https://dex.example.com/dex/callback
        #     # Google supports whitelisting allowed domains when using G Suite
        #     # (Google Apps). The following field can be set to a list of domains
        #     # that can log in:
        #     #
        #     hostedDomains:
        #     - openobserve.ai
        #     - zinclabs.io
        - type: ldap
          name: OpenLDAP
          id: ldap
          config:
            host: openldap:389
            insecureNoSSL: true
            bindDN: cn=admin,dc=o2,dc=ai
            bindPW: Z54H7w5WQUARsLKaumM967iX62msTEno
            usernamePrompt: Email Address
            userSearch:
              baseDN: ou=users,dc=o2,dc=ai
              filter: "(objectClass=inetOrgPerson)"
              username: mail
              idAttr: DN
              emailAttr: mail
              nameAttr: cn
            groupSearch:
              baseDN: ou=teams,dc=o2,dc=ai
              filter: "(objectClass=groupOfUniqueNames)"
              userMatchers:
                - userAttr: DN
                  groupAttr: uniqueMember
              nameAttr: entryDN
    image:
      repository: dexidp/dex
      tag: v2.37.0
      pullPolicy: IfNotPresent
    extraEnv: []
    podAnnotations: {}
    ingress:
      enabled: true
      className: "nginx"
      annotations:
        cert-manager.io/issuer: letsencrypt
        kubernetes.io/tls-acme: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        # nginx.ingress.kubernetes.io/connection-proxy-header: keep-alive
        # nginx.ingress.kubernetes.io/proxy-connect-timeout: '600'
        # nginx.ingress.kubernetes.io/proxy-send-timeout: '600'
        # nginx.ingress.kubernetes.io/proxy-read-timeout: '600'
        # nginx.ingress.kubernetes.io/proxy-body-size: 32m
      hosts:
        - host: dex.example.com
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls:
        - secretName: dex.example.com
          hosts:
            - dex.example.com

probes:
  alertmanager:
    enabled: false
    config:
      readinessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
      livenessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
  compactor:
    enabled: false
    config:
      readinessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
      livenessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
  ingester:
    enabled: true
    config:
      readinessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
      livenessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
  querier:
    enabled: true
    config:
      readinessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
      livenessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
  router:
    enabled: true
    config:
      readinessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
      livenessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
  dex:
    enabled: false
    config:
      readinessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
      livenessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
  openfga:
    enabled: false
    config:
      readinessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
      livenessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
  reportserver:
    enabled: false
    config:
      readinessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
      livenessProbe:
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 3
        terminationGracePeriodSeconds: 30
